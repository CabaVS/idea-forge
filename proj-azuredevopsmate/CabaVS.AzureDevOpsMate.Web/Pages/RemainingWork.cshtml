@page "/remaining-work/{workItemId:int}"
@model CabaVS.AzureDevOpsMate.Web.Pages.RemainingWork

<h1>Remaining Work Analyzer</h1>

@if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}
else
{
    <h3>Work Item Id: @Model.WorkItemId</h3>
    
    <div class="container-fluid">
        <div id="chartsRow" class="row g-3"></div>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/echarts@6.0.0/dist/echarts.min.js"
            integrity="sha256-uqjf5+HZM2uY6Jhrp+IOoV582+oe9CpZ1ZR4Yy+kWh0="
            crossorigin="anonymous"></script>
    <script>
        const snapshots = @Html.Raw(Model.SnapshotsJson);
        console.log(snapshots);

        const allTeams = Array.from(new Set(
            snapshots.flatMap(s => (s.report || []).map(r => r.team).filter(Boolean))
        )).sort((a,b)=>a.toLowerCase().localeCompare(b.toLowerCase()));
        
        const days = snapshots.map((_, i) => `Day ${i + 1}`);
        
        function getSeriesForTeam(team) {
            const f = [], r = [], t = [], o = [];
            snapshots.forEach(snap => {
                const entry = (snap.report || []).find(x => x.team === team);
                if (entry && entry.remainingWork) {
                    const rw = entry.remainingWork;
                    f.push(rw.functionality ?? 0);
                    r.push(rw.requirements  ?? 0);
                    t.push(rw.technical     ?? 0);
                    o.push(rw.other         ?? 0);
                } else {
                    f.push(0); r.push(0); t.push(0); o.push(0);
                }
            });
            return { f, r, t, o };
        }
        
        function buildOption(team) {
            const s = getSeriesForTeam(team);
            return {
                animation: false,
                tooltip: { trigger: 'axis' },
                grid: { left: 36, right: 12, top: 10, bottom: 60 },
                xAxis: {
                    type: 'category',
                    data: days,
                    axisLabel: {
                        interval: Math.ceil(days.length/10) - 1,
                        margin: 12
                    }
                },
                yAxis: { type: 'value' },
                legend: {
                    type: 'plain',
                    bottom: 6,
                    orient: 'horizontal',
                    align: 'auto',
                    itemGap: 16,
                    itemWidth: 14,
                    itemHeight: 8,
                    icon: 'roundRect',
                    textStyle: { fontSize: 11 },
                    data: ['Functionality', 'Requirements', 'Technical', 'Other']
                },
                series: [
                    { name: 'Functionality', type: 'line', stack: 'total', areaStyle: {}, symbol: 'none',
                        itemStyle: { color: '#1f77b4' }, data: s.f },
                    { name: 'Requirements',  type: 'line', stack: 'total', areaStyle: {}, symbol: 'none',
                        itemStyle: { color: '#2ca02c' }, data: s.r },
                    { name: 'Technical',     type: 'line', stack: 'total', areaStyle: {}, symbol: 'none',
                        itemStyle: { color: '#ffcc00' }, data: s.t },
                    { name: 'Other',         type: 'line', stack: 'total', areaStyle: {}, symbol: 'none',
                        itemStyle: { color: '#d62728' }, data: s.o }
                ]
            };
        }
        
        const baseOption = {
            xAxis: { data: ['A', 'B', 'C', 'D', 'E'] },
            yAxis: {},
            series: [
                { data: [10, 22, 28, 43, 49], type: 'line', stack: 'x', areaStyle: {} },
                { data: [ 5,  4,  3,  5, 10], type: 'line', stack: 'x', areaStyle: {} }
            ]
        };

        const slug = s => String(s || '').toLowerCase()
            .replace(/[^a-z0-9]+/g, '-')
            .replace(/(^-|-$)/g, '');
        
        const chartsRow = document.getElementById('chartsRow');
        const chartInstances = [];
    
        function renderAll() {
            chartsRow.innerHTML = '';
            chartInstances.splice(0, chartInstances.length);

            allTeams.forEach((t) => {
                const id = `chart-team-${slug(t) || 'unknown'}`;
                
                const col = document.createElement('div');
                col.className = 'col-12 col-md-6 col-lg-4';
    
                // Card-ish container (optional)
                const card = document.createElement('div');
                card.className = 'border rounded p-2 h-100';
    
                // Title
                const title = document.createElement('div');
                title.className = 'fw-semibold small mb-2 text-truncate';
                title.textContent = t;
    
                // Chart mount
                const mount = document.createElement('div');
                mount.id = id;
                mount.style.width = '100%';
                mount.style.height = '240px';
    
                card.appendChild(title);
                card.appendChild(mount);
                col.appendChild(card);
                chartsRow.appendChild(col);
    
                // Init ECharts for this team using the same showcase option
                const chart = echarts.init(mount, null, { renderer: 'canvas' });
                chart.setOption(buildOption(t), true); // stacked areas with real team data
                chartInstances.push(chart);
            });
        }
    
        renderAll();
    
        // Keep charts responsive
        window.addEventListener('resize', () => {
            chartInstances.forEach(c => c.resize());
        });
    </script>
}