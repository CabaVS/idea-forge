name: Project - Azure DevOps Mate

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - 'Directory.Build.props'
      - 'Directory.Packages.props'
      - 'global.json'
      - 'shared/CabaVS.Shared.Infrastructure/**'
      - '.github/workflows/proj-azuredevopsmate.yml'
      - 'proj.azuredevopsmate.Dockerfile'
      - 'proj-azuredevopsmate/**'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  BUILD_CONFIGURATION: "Release"
  DOCKER_IMAGE_NAME: "proj-azuredevopsmate"
  DOCKERFILE_PATH: "./proj.azuredevopsmate.Dockerfile"
  PATH_TO_CSPROJ: "./proj-azuredevopsmate/CabaVS.AzureDevOpsMate/CabaVS.AzureDevOpsMate.csproj"
  PATH_TO_FUNCTIONS_CSPROJ: "./proj-azuredevopsmate/CabaVS.AzureDevOpsMate.Functions/CabaVS.AzureDevOpsMate.Functions.csproj"
  PATH_TO_GLOBAL_JSON: "./global.json"

jobs:
  build-app:
    name: Build application
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: ${{ env.PATH_TO_GLOBAL_JSON }}

      - name: Restore
        run: dotnet restore ${{ env.PATH_TO_CSPROJ }}

      - name: Build
        run: dotnet build ${{ env.PATH_TO_CSPROJ }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        
      - name: Publish
        run: dotnet publish ${{ env.PATH_TO_CSPROJ }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build -o ./publish
  
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-publish
          path: ./publish
  
  push-image:
    environment: production
    name: Push image to ACR
    needs: [build-app]
    runs-on: ubuntu-latest
    
    outputs:
      sha_tag: ${{ steps.vars.outputs.sha_tag }}
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-publish
          path: ./publish

      - name: Set image tags
        id: vars
        run: |
          echo "sha_tag=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -f ${{ env.DOCKERFILE_PATH }} \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:latest \
            -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.sha_tag }} .

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Docker Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Push image to ACR
        run: |
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.vars.outputs.sha_tag }}

  deploy-to-aca:
    environment: production
    name: Deploy to ACA
    needs: [push-image]
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          registryUrl: ${{ secrets.ACR_NAME }}.azurecr.io
          containerAppName: ${{ secrets.PROJ_AZDM_ACA_NAME }}
          resourceGroup: ${{ secrets.RG_NAME }}
          imageToDeploy: ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.push-image.outputs.sha_tag }}
          environmentVariables: >
            APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
            ASPNETCORE_ENVIRONMENT=${{ secrets.ASPNETCORE_ENVIRONMENT }}
            AZURE_CLIENT_ID=${{ secrets.PROJ_AZDM_UAMI_CLIENT_ID }}
            CVS_CONFIG_BLOB_NAME=${{ secrets.PROJ_AZDM_CONFIG_BLOB_NAME }}
            CVS_CONFIG_CONTAINER_NAME=${{ secrets.STORAGE_CONTAINER_FOR_CONFIGS }}